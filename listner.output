01 : Passed: input file was entered as perameter  
03: Pass or Fail:
input file name is : listner2.c  time is: Fri Feb 21 12:14:49 2014
	:if you see noting between the colon and the if, then test 3 pass the function returned void else test 3 failed:
**************************************
************* Page Header  ***********
*************              ***********
**************************************
1: #include <stdio.h>
2: #include <stdlib.h> /* for atoi() */
3: #include <string.h>
4: #include <time.h>
5: #include <stdbool.h>
6: #include "listner_print.h"
7: #include "globals.h"
8: #include "listner_other_function.h"
9: #include "listner2_test.h"
10: 
11: 
12: //  function declaration before use
13: void init_lister(char fileN[] );
14: bool get_source_line();
15: int line_number = 0;
16: bool testing = false;
17: int testCase = 0;
18: /*  ************************************************
19:     main program, program will reads input text file
20:     and add line number in front of each line, then
21:     output the result to user or output file.
22:     ************************************************/
23: int main(int argc, char *argv[]){
24: bool continueReadingFile = true;  // set var to true
25: char * myString = "";
26: 
27:      // check for input file, exit if no input file
28:     // if (argc <2 ){
29:     //      printf("input is: %d",argc);
30:     //      return 0;
31:    //  }
32: 
33: 
34:         testing = true;
35: 
36: 
37:     if (testing)
38:         testForCase1(argc);
39: 
40: 
**************************************
************* Page Header  ***********
*************              ***********
**************************************
41:     if ( argc >= 3 )
42:     {
43:      testCase =  atoi(argv[2]);
44:     }
45:     else
46:         {testing = false ;    }
47: 
48: // check existing of input file
49: if (testCase == 3)
50:     {testForCase3(argv[1]);
51: 
52:     }
53:  else
54: {init_lister(argv[1]);}
55: 
56: // loop thru the text file line by line until eof
57: while ( continueReadingFile){
58:   // loop breaks if raches eof with false return
59:   continueReadingFile = get_source_line();
60: }
61: printf("\nend reading file !\nTotal lines: %d ", line_number);
62: 
63: return 0;
64: }
65: 
66: 
67: 

end reading file !
Total lines: 67 